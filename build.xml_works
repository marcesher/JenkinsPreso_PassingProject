<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="CFO_JenkinsPreso_PassingProject" basedir="." default="runUnitTests">


	<target name="init">
		<!-- what's the directory name of your application? this value will be used throughout this build file; if you don't want that, just replace the references to ${application.name} with your desired values -->
		<property name="application.name" value="CFO_JenkinsPreso_PassingProject" />
		
		<!-- what's the name of the directory where your tests live? -->
		<property name="test.dir.name" value="test"/>
		
		<!-- where do your tests live, relative to this build file? -->
		<property name="test.dir.location" location="${test.dir.name}" />
		<!-- what is the cfc dot-notation path to that directory, as ColdFusion sees it? -->
		<property name="test.cfcpath" value="${application.name}.${test.dir.name}" />
		<!-- what "runner" URL should the tests hit. -->
		<property name="test.runner" value="/${application.name}/${test.dir.name}/HttpAntRunner.cfc" />
		<!-- what server and port should your tests run against? -->
		<property name="test.server" value="localhost" />
		<property name="test.serverport" value="80" />

		<!-- where does the mxunit ant jar file live? it's easiest to copy it out of the mxunit install and put it into your app-->
		<path id="project.classpath">
			<fileset dir="lib">
				<include name="**/*.jar" />
			</fileset>
		</path>
		
		<taskdef name="mxunittask" classname="org.mxunit.ant.MXUnitAntTask" classpathref="project.classpath" />

		<!-- this is where the xml and html will live for the report generator -->
		<property name="test.output" location="${test.dir.name}/testresults" />
		<property name="test.output.xml" location="${test.output}/xml" />
		<property name="test.junitoutput" location="${test.output}/html" />

		<!-- where the zip file for deployment will live -->
		<property name="dist.dir" location="deploy" />
		<!-- what to start the "path" in the zip with -->
		<property name="dist.prefixInZip" value="${application.name}" />

		<!-- dump the properties -->
		<echoproperties prefix="test" />
		<echoproperties prefix="dist" />
	</target>

	<target name="clean" depends="init">
		<delete dir="{test.output}" failonerror="false" />
		<delete dir="{dist.dir}" failonerror="false" />
		<mkdir dir="${test.output.xml}" />
		<mkdir dir="${test.junitoutput}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="svn.update" depends="init">
		<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="project.classpath" />
		<echo message="updating ${test.dir.location}" />
		<svn svnkit="true">
			<update dir="${test.dir.location}"/>
		</svn>
	</target>
	
	<target name="runUnitTests" depends="init">
		<mkdir dir="${test.output.xml}/unit" />
		<runTestDirectory directoryName="unit"/>
	</target>
	
	<target name="runUITests" depends="init,reinitApp">
		<mkdir dir="${test.output.xml}/UI" />
		<runTestDirectory directoryName="UI" excludes=""/>		
	</target>
	
	<target name="reinitApp" depends="init">
		<property name="reinitURL" value="http://${test.server}:${test.serverport}/${application.name}/index.cfm?reset_app=true"/>
		<echo message="reiniting app at ${reinitURL}"/>
		<loadresource property="test.reinitAppOutput">
			<url url="${reinitURL}"/>
		</loadresource>
	</target>

	<target name="runAllTests" description="Make output directories and run the MXUnit task" depends="init,clean,runUnitTests,runUITests">
		<!-- generate pretty reports -->
		<antcall target="junitreport" />
		<fail if="tests.bombed" message="Failing the build due to test failures"/>
	</target>

	<target name="junitreport" depends="init,clean" description="Runs the report without running the tests">
		<junitreport todir="${test.junitoutput}">
			<fileset dir="${test.output.xml}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${test.junitoutput}" />
		</junitreport>
	</target>

	<target name="dist" depends="init,clean" description="Builds the zip file for deployment">
		<!-- in real life, these different environment-specific zips would most likely include environment-specific config files -->
		<zip destfile="${dist.dir}/${application.name}_QA.zip">
			<zipfileset dir="." excludes="test/, deploy/, lib/, .apptacular/, .project, build.xml, settings.xml, .settings" prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
		<zip destfile="${dist.dir}/${application.name}_UAT.zip">
			<zipfileset dir="." excludes="test/, deploy/, lib/, .apptacular/, .project, build.xml, settings.xml, .settings" prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
		<zip destfile="${dist.dir}/${application.name}_STAGING.zip">
			<zipfileset dir="." excludes="test/, deploy/, lib/, .apptacular/, .project, build.xml, settings.xml, .settings" prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
		<zip destfile="${dist.dir}/${application.name}_PROD.zip">
			<zipfileset dir="." excludes="test/, deploy/, lib/, .apptacular/, .project, build.xml, settings.xml, .settings" prefix="${dist.prefixInZip}" casesensitive="false" />
		</zip>
	</target>

	<macrodef name="runTestDirectory">
		<attribute name="directoryName"/>
		<attribute name="excludes" default=""/>
		<sequential>
			<mxunittask server="${test.server}" port="${test.serverport}" defaultrunner="${test.runner}" outputdir="${test.output.xml}/@{directoryName}" verbose="true" failureproperty="tests.bombed" errorproperty="tests.bombed">
				<directory path="${test.dir.location}/@{directoryName}" recurse="true" packageName="${test.cfcpath}.@{directoryName}" componentPath="${test.cfcpath}.@{directoryName}" excludes="@{excludes}" />
			</mxunittask>
		</sequential>
	</macrodef>

</project>